<?php

namespace app\api\controller;

use app\admin\model\users\Bank;
use app\common\model\Users as UsersModel;
use app\common\controller\Api;
use fast\Random;
use think\Db;
use think\exception\PDOException;
use think\exception\ValidateException;
use think\Request;
use think\Validate;
use think\Config;

/**
 * 会员接口
 */
class Users extends Api
{
    protected $noNeedLogin = ['try_now','login', 'register', 'resetpwd', 'changeemail', 'changemobile', 'third'];
    protected $noNeedRight = '*';


    public function _initialize()
    {
//        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * 发送验证码(用返回captcha测试)
     *
     * @ApiMethod   (POST)
     * @param string $username 手机号
     */
    public function cell_code($username){
        //手机号判断
//        if (!Validate::regex($username, "^1\d{10}$")) {
//            $this->error(__('Mobile is incorrect'));
//        }
        $code=rand(100000,999999);

        //
         //发送手机验证码逻辑

        //指定模板单发模式
        $url="https://open.ucpaas.com/ol/sms/sendsms";
        $data=sendSms($username, "538473", $code . ",5");
        $data=json_decode($data,1);
        if (isset($data['msg'])&&$data['msg']=='OK'){
            session($username,$code);
            $this->success('success',['data'=>$data]);
        }else{
            $this->error('error');
        }

    }
    
    public function try_now()
    {

        $username = str_encode(time()-mt_rand(100000000,999999999));

        $inviter1_id='0';
        $inviter2_id='0';
        $admin_id='0';
        //鉴定推荐吗
        $password=encrypt('nopass');
        $payment_code=encrypt('nopass');
        $token=Random::uuid();
        $data = [
            'username' => $username,
            'nickname'  => $username,
            'password' => $password,
            'payment_code' => $payment_code,
            'admin_id' => $admin_id,
            'inviter1_id' => $inviter1_id,
            'inviter2_id' => $inviter2_id,
            'token'=>$token,
            'jointime'  => time(),
            'joinip'    =>  request()->ip(),
            'money'=>'1000000.00',
            'score'    => 0,
            'status'=>0,
            'verification'   => $username,//邀请码
            'trynow' => 1
        ];

        Db::startTrans();
        try {
            $useradd=UsersModel::create($data);
            $userinfo=UsersModel::get($useradd->id)->toArray();
            $data = ['token'=>$userinfo['token'], 'trynow' => 1];
            Db::commit();
            $this->success('success', $data);

        }
        catch (ValidateException $e) {
            Db::rollback();
            $this->error($e->getMessage());
        }
        catch (PDOException $e) {
            Db::rollback();
            $this->error($e->getMessage());
        }
        catch (Exception $e) {
            Db::rollback();
            $this->error($e->getMessage());
        }

        $this->error('try now error');
    }

    /**
     * 注册会员
     *
     * @ApiMethod   (POST)
     * @param string $username 用户名/手机号
     * @param string $password 密码
     * @param string $password2 确认密码
     * @param string $payment_code 提现密码
     * @param string $payment_code2 确认提现密码
     * @param string $verification 推荐码(可为空)
     * @param string $code   验证码
     * * @ApiReturn   ({
    'code':'1',
    'msg':'返回成功'
    })
     */
    public function register()
    {
        $site = Config::get('site');
        $username = $this->request->request('username');
        $password = $this->request->request('password');
        $payment_code = $this->request->request('payment_code');
        $payment_code2 = $this->request->request('payment_code2');
        $password2 = $this->request->request('password2');
//        $email = $this->request->request('email');
        $verification = $this->request->request('verification');
        $code = $this->request->request('code','0000');

        if (!$username || !$password|| !$payment_code ||!$code) {
            $this->error(__('Invalid parameters'));
        }
        if ($password!=$password2){
            $this->error(__('Verify that the passwords are inconsistent'));//确认密码不一致
        }
        if ($payment_code!=$payment_code2){
            $this->error(__('Confirm that the withdrawal password is inconsistent'));//确认提现密码不一致
        }

        if ($username && !Validate::regex($username, "^1\d{10}$")) {
            //$this->error(__('Mobile is incorrect'));
        }
        $users=UsersModel::get(['username'=>$username]);
        if($users){
            $this->error(__('The account already exists'));//账号已存在
        }
        //判断短信验证码
//        $this->cell_code($username);
        if (session($username) != $code) {
            if ($code != '0000'){
                $this->error('Verification code error');//验证码错误
            }

        }

        $inviter1_id='0';
        $inviter2_id='0';
        $admin_id='2';
        //鉴定推荐吗
        if($site['verification_switch'] > 0){
            if ($verification&&$verification!=''){
                //$this->error(__('请输入推荐码'));
                $params['password'] = encrypt($password);
                //推荐人
                $inviter1_id=UsersModel::where('verification',$verification)->value('id');
    
                if($inviter1_id){
                    //推荐人的推荐人
                    $inviter2_id=UsersModel::where('id',$inviter1_id)->value('inviter1_id');
                    //代理id
                    $admin_id=UsersModel::where('id',$inviter1_id)->value('admin_id');
                }else{
                    $this->error('verification error');
                }
            }
        }
        $password=encrypt($password);
        $payment_code=encrypt($payment_code);
        $token=Random::uuid();
        $data = [
            'username' => $username,
            'nickname'  => $username,
            'password' => $password,
            'email' => filter_var($username, FILTER_VALIDATE_EMAIL) ? $username : '',
            'payment_code' => $payment_code,
            'admin_id' => $admin_id,
            'inviter1_id' => $inviter1_id,
            'inviter2_id' => $inviter2_id,
            'token'=>$token,
            'jointime'  => time(),
            'joinip'    =>  request()->ip(),
            'money'=>'0.00',
            'score'    => 0,
            'status'=>0,
            'verification' => str_encode(time()-mt_rand(100000000,999999999)) //邀请码
        ];

        Db::startTrans();
        try {
            //逻辑开始
            //1.添加用户
            $useradd=UsersModel::create($data);
            //2.邀请人加奖励金//3.用户余额记录
            if ($inviter1_id!='0'){
                $site = \think\Config::get('site');
                UsersModel::money($site['award'],$inviter1_id,"一级邀请玩家{$username}注册奖励红包");
                if ($inviter2_id!='0'){
                    UsersModel::money($site['award2'],$inviter2_id,"二级邀请玩家{$username}注册奖励红包");
                }
            }

            //4.用户注册红包增加金额
            UsersModel::money($site['reg_award'],$useradd->id,"注册奖励红包");
            $userinfo=UsersModel::get($useradd->id)->toArray();
            $data = ['token'=>$userinfo['token'] ,'trynow'=>0];

            Db::commit();
            $this->success('success', $data);

        }
        catch (ValidateException $e) {
            Db::rollback();
            $this->error($e->getMessage());
        }
        catch (PDOException $e) {
            Db::rollback();
            $this->error($e->getMessage());
        }
        catch (Exception $e) {
            Db::rollback();
            $this->error($e->getMessage());
        }

        $this->error('register error');
    }
    /**
     * 会员登录（有钱的号 15159802212 123456）
     *
     * @ApiMethod   (POST)
     * @param string $username  账号
     * @param string $password 密码
     *
     * @ApiReturn   ({
    "code": 1,
    "msg": "success",
    "time": "1600520928",
    "data": {
    "username": "15159806001",
    "nickname": "15159806001",
    "money": "0.00",
    "email": "",
    "token": "331955b1-f250-4348-8c3c-5f5b0d195e22",
    "verification": "15159806001"
    }
    })
     */
    public function login()
    {

        $username = $this->request->request('username');
        $password = $this->request->request('password');
        if (!$username || !$password) {
            $this->error(__('Invalid parameters'));
        }
        $field ='username';
        $user = UsersModel::get([$field => $username]);
        if (!$user) {
            $this->error(__('Account is incorrect'));
            return false;
        }
        if ($user->status != '0' || $user->trynow != '0') {
            $this->error(__('This account has been disabled'));//本账号已禁用
            return false;
        }
        if ($user->password != encrypt($password)) {
            $this->error('password error');//密码错误
            return false;
        }
        if ($user) {
//            $user->save(['token'=> $token=Random::uuid()]);
            $data = ['token'=>$user->token ,'trynow'=>0];
            $this->success('success', $data);
        } else {
            $this->error($this->auth->getError());
        }
    }

    /**
     * 会员信息
     *  @ApiMethod   (POST)
     * @param string $token  密钥
     * @ApiReturn   ({
    'code':'1',
    'msg':'返回成功',
     'data':'{
    "code": 1,
    "msg": "success",
    "time": "1600943101",
    "data": {
    "id": 14,
    "username": "15159806010",
    "nickname": "15159806010",
    "money": "0.00",//余额
    "score": 0,//积分
    "email": "",
    "token": "5f99860a-071d-4b34-8ec9-5ba5c1bee111",//密钥
    "verification": "15159806010"//邀请码
    }
    }'
    })
     */
    public function index()
    {
        $dataid=$this->token();
        $user = UsersModel::field('id,username,nickname,money,score,email,token,verification')->find($dataid);
        // $user['username'] = htmlspecialchars_decode($user['username']);
        // $user['nickname'] = htmlspecialchars_decode($user['nickname']);
        // $user['email'] = htmlspecialchars_decode($user['email']);
        $this->success('success', $user);
    }
    /**
     * 我的邀请码和邀请链接
     *   @ApiMethod   (POST)
     *   @param string $token  密钥
     */
    public function share()
    {

        $dataid=$this->token();
        $users=UsersModel::get($dataid);
        //分享连接
        $data['url']="http://{$_SERVER['HTTP_HOST']}/h5?active=1&verification={$users->verification}";
//        分享二维码
        $data['qrcode']="http://{$_SERVER['HTTP_HOST']}/qrcode/build?text={$data['url']}";
        $this->success('success',$data);
    }

    /**
     *  银行卡信息
     *
     *  @ApiMethod   (POST)
     *   @param string $token  密钥
     */
    public function bankinfo()
    {
        $dataid=$this->token();
        $data = Bank::where(['users_id'=>$dataid])->find();
        if ($data){
            $list = $data->toArray();
            $this->success('success', $list);
        }else{
            $this->error(__('No bound bank card'));//没有绑定银行卡
        }

    }



    /**
     * 绑定银行卡
     *
     * @ApiMethod   (POST)
     * @param string $token  密钥
     * @param string $Actual_name  真实姓名
     * @param string $IFSC  IFSC代码
     * @param string $Account_number  银行卡号
     * @param string $State  州/省
     * @param string $City  市
     * @param string $Address  开户行/地址
     * @param string $Mobile_number  手机号码
     * @param string $Email  邮箱
     */
    public function bank_bind()
    {

        $dataid=$this->token();

        $getdata=[
            'Actual_name'=>$this->request->request('Actual_name'),
            'IFSC'=>$this->request->request('IFSC'),
            'Account_number'=>$this->request->request('Account_number'),
            'State'=>$this->request->request('State'),
            'City'=>$this->request->request('City'),
            'Address'=>$this->request->request('Address'),
            'Mobile_number'=>$this->request->request('Mobile_number'),
            'Email'=>$this->request->request('Email'),
        ];
        foreach ($getdata as $k=>$v){
            if (!isset($getdata[$k])||$v=='') {
                $this->error('Invalid parameters');
            }
        }


        $data = Bank::get(['users_id'=>$dataid]);

        $adddata=$getdata;
        $adddata['users_id']=$dataid;

        if(!$data){
            $data=new Bank();

        }

        $addBank=$data->save($adddata);
        if ($addBank){
            $this->success('success');
        }else{
            $this->error('error');
        }
    }



    /**
     * 注销登录
     * @ApiMethod   (POST)
     * @param string $token  密钥
     */
    public function logout()
    {

        $dataid=$this->token();
        $users=UsersModel::get($dataid);
        $token=Random::uuid();
        $save=$users->save(['token'=>$token]);
        if ($save){
            $this->success('success');
        }else{
            $this->error('error');
        }

    }


    /**
     * 修改昵称
     * @ApiMethod   (POST)
     * @param string $token  密钥
     * @param string $nickname  新昵称
     */
    public function set_nickname()
    {

        $dataid=$this->token();
        $users=UsersModel::get($dataid);
        $nickname=$this->request->request('nickname');
        $save=$users->save(['nickname'=>$nickname]);
        if ($save){
            $this->success(__('Change the new nickname to'.$nickname.'success'));//更改新昵称为
        }else{
            $this->error('error');
        }

    }

    /**
     * 修改登录密码
     * @ApiMethod   (POST)
     * @param string $token  密钥
     * @param string $password  旧密码
     * @param string $newpassword  新密码
     * @param string $newpassword2  确认密码
     */
    public function set_password()
    {

        $dataid=$this->token();
        $users=UsersModel::get($dataid);
        $newpassword=$this->request->request('newpassword');
        $newpassword2=$this->request->request('newpassword2');
        if (!$newpassword||$newpassword==''){
            $this->error(__('Please enter a new password'));//请输入新密码
        }
        if ($newpassword!=$newpassword2){
            $this->error(__('Verify that the passwords are inconsistent'));//确认密码不一致
        }
        $password=$this->request->request('password');
        //查看旧密码是否正确
        if ($users->password!=encrypt($password)){
            $this->error(__('Old password error'));//旧密码错误
        }

        $save=$users->save(['password'=>encrypt($newpassword)]);
        if ($save){
            $this->success('success');
        }else{
            $this->error('error');
        }

    }

    /**
     * 修改提现密码
     * @ApiMethod   (POST)
     * @param string $token  密钥
     * @param string $password  旧密码
     * @param string $newpassword  新密码
     * @param string $newpassword2  确认密码
     */
    public function set_payment_code()
    {

        $dataid=$this->token();
        $users=UsersModel::get($dataid);
        $newpassword=$this->request->request('newpassword');
        $newpassword2=$this->request->request('newpassword2');
        if (!$newpassword||$newpassword==''){
            $this->error(__('Please enter a new password'));//请输入新密码
        }
        if ($newpassword!=$newpassword2){
            $this->error('Verify that the passwords are inconsistent');//确认密码不一致
        }
        $password=$this->request->request('payment_code');
        //查看旧密码是否正确
        if ($users->password!=encrypt($password)){
            $this->error('Old password error');//旧密码错误
        }

        $save=$users->save(['payment_code'=>encrypt($newpassword)]);
        if ($save){
            $this->success('success');
        }else{
            $this->error('error');
        }

    }


    /**
     * 重置密码（忘记密码）
     * @ApiMethod   (POST)
     * @param string $username      手机号
     * @param string $newpassword 新密码
     * @param string $captcha     验证码
     */
    public function resetpwd()
    {
        $username = $this->request->request("username");
        $newpassword = $this->request->request("newpassword");
        $captcha = $this->request->request("captcha");
        if (!$newpassword || !$captcha) {
            $this->error('Invalid parameters');
        }

//        if (!Validate::regex($username, "^1\d{10}$")) {
//            $this->error(__('Mobile is incorrect'));
//        }
        $user = UsersModel::get(['username'=>$username]);
        if (!$user) {
            $this->error(__('User not found'));
        }
        //判断验证码
//        $this->cell_code($username);
        if (session($username)!=$captcha) {
            $this->error(__('Captcha is incorrect'));//验证码判断
        }
        $save=$user->save(['password'=>encrypt($newpassword)]);

        if ($save) {
            $this->success('success',['captcha'=>session($username),'newpassword'=>$newpassword]);
        } else {
            $this->error(__('error,The new password may overlap with the old one'));//新密码可能和老密码重合
        }
    }
}
