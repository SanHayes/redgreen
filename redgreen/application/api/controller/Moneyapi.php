<?php

namespace app\api\controller;
use app\admin\model\Admin;
use app\admin\model\Bet;
use app\admin\model\Money;
use app\admin\model\Pay;
use app\admin\model\users\Bank;
use app\common\controller\Api;
use app\common\model\users\Moneylog;
use app\common\model\users\Scorelog;
use think\Config;

/**
 * 用户金额和积分
 */
class Moneyapi extends Api
{
    protected $noNeedLogin = "*";
    protected $noNeedRight = '*';
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }
    /**
     * 充值和提现
     *
     * @param string $token 密钥
     * @param string $type  1=充值,2=提现（默认1）
     * @param string $money   金额
     * @param string $payment   提现密码
     * @param string $memo 备注
     * @ApiReturn   ({
        'code':'1',
        'msg':'返回成功'
        })
     */
    public function money_apply(){
        $site = Config::get('site');
        $userid=$this->token();//token验证
        $type = $this->request->request('type'); //1充值  2提现
        if ($type!='1'&& $type!='2'){
            $type='1';
        }

        if ($type=='2'){//提现检查银行卡
            //需要绑定银行卡相关信息
            $data = Bank::get(['users_id'=>$userid]);
            if (!$data){
                $this->error(__('Please bind bank card'));//需要先绑定银行卡
            }
        }


        $money = $this->request->request('money');
        $memo=$this->request->request('memo');
        //判断充值/提现 金额是否符合最低标准
        if ($type=='1'){
            $msg='recharge';//充值
            if ($money<$site['addmoneymin']){
                $this->error(__('The recharge amount is too low,money:'.$site['addmoneymin']));//充值金额过低
            }
            $tx_money = $money;
        }
        else{
            $msg='withdrawal';//提现
            //判断提现密码
            $payment=$this->request->request('payment');
            $user=\app\common\model\Users::get($userid);

            if (!$payment||encrypt($payment)!=$user->payment_code){
                $this->error("payment error");//提现密码错误
            }
            if ($money<$site['reducemoneymin']){
                $this->error(__('The withdrawal amount is too low,money:'.$site['reducemoneymin']));//提现金额过低，至少
            }

            //判断余额是否足够
//            加上税金和手续费
            $tax=$money*($site['tax']/100);
            $tx_money=$money-$tax-$site['service_charge'];//提现扣除余额
            if ($user->money<$tx_money){
                $this->error("not sufficient funds,need {$tx_money}");//提现金额过低，至少
            }
            $memo.=" 系统：会员提现{$money},需要税金{$tax},手续费{$site['service_charge']},实际提现金额{$tx_money}";
        }
        $adddata=[
            'type'=>$type,
            'users_id'=>$userid,
            'money'=>$tx_money,
            'withdraw_money'=>$money,
            'status'=>0,
            'memo'=>$memo,
        ];
        if (Money::create($adddata)){
            $this->success(__($msg.':'.$money.' success,Please wait patiently'));
        }else{
            $this->error('error');
        }
    }


    /**
     * 用户充值（三方订单支付）
     * @param string $token 密钥
     * @param string $money   金额
     *
     *
     */
    public function money_pay_add()
    {
        $site = Config::get('site');
        $money=$this->request->request('money');
        $userid=$this->token();//token验证
        //需要绑定银行卡相关信息
        $data = Bank::get(['users_id'=>$userid]);
        if (!$data){
            $this->error(__('Please bind bank card'));//需要先绑定银行卡
        }
//        $user=\app\common\model\Users::get($userid);
        if ($money<$site['addmoneymin']){//充值金额过低
            $this->error(__('The recharge amount is too low,money:'.$site['addmoneymin']));//提现金额过低，至少
        }

        //添加订单
        $paydata=[
            'out_trade_no'=>date("Ymdhis").mt_rand(00000,999999),//订单号
            'pay_amount'=>$money,//金额
            'pay_applydate'=>time(),//pay_amount
            'users_id'=>$userid,//pay_amount
            'pay_productname'=>'用户充值',
            'trade_state'=>'NOTPAY',//NOTIFYED=通知成功,SUCCESS=支付成功,NOTPAY=未支付
        ];
        $useradd=Pay::create($paydata);
        if ($useradd){
            $data=[
                'url'=>"http://{$_SERVER['SERVER_NAME']}/index/pay/index?id={$useradd->id}",
            ];
            $this->success('success',$data);
        }else{
            $this->error('error');
        }

    }

    /**
     * 相关的设置 api/moneyapi/get_config
     * @param string $token 密钥
     * @param string $type  service_charge=手续费,tax=税金,reducemoneymin=最低提现金额,addmoneymin=最低充值金额,fee=下注手续费（默认service_charge）
     */
    function get_config(){
        $userid=$this->token();//token验证
        $type = $this->request->request('type');
        $site = Config::get('site');
        if ($type!='service_charge' && $type!='tax' && $type!='reducemoneymin' && $type!='addmoneymin' && $type!='fee'){
            $type="service_charge";
        }
        $this->success('success', $site[$type]);
    }

    /**
     * 充值记录和提现记录（仅支持提现记录）
     *
     * @param string $token 密钥
     * @param string $type  1=充值,2=提现（默认1）
     * @param string $limit  数量（默认20）
     * @param string $page  页数（默认1）
     *
     */
    function money_log(){

        $userid=$this->token();//token验证
        $limit = $this->request->request('limit');
        if (!$limit && $limit==''){
            $limit=20;
        }
        $page = $this->request->request('page');
        if (!$page && $page==''){
            $page=1;
        }
        $page=($page-1)*$limit;

        $type = $this->request->request('type');
        if ($type!='1'&& $type!='2'){
            $type='1';
        }
        $money=new Money();
        $typetext=$money->getTypeList();
        $getlog=Money::where(['users_id'=>$userid,'type'=>$type])->order('createtime','desc')
            ->limit($limit,$page)->select();
        foreach ($getlog as $k=>$v){
            $getlog[$k]['createtime']=date('Y-m-d H:i:s',$v['createtime']);
            $getlog[$k]['updatetime']=date('Y-m-d H:i:s',$v['updatetime']);
        }

        $data['list']=$getlog;
        $data['count']=Money::where(['users_id'=>$userid,'type'=>$type])->count();
        if ($getlog){
//            $this->success(__($typetext[$type]).'记录',$data);
            $this->success('success',$data);
        }else{
            $this->error(__('no record'));
        }

    }


    /**
     * 充值记录
     * @param string $token 密钥
     * @param string $limit  数量（默认20）
     * @param string $page  页数（默认1）
     */
    function money_add_log(){

        $userid=$this->token();//token验证
        $limit = $this->request->request('limit');
        if (!$limit && $limit==''){
            $limit=20;
        }
        $page = $this->request->request('page');
        if (!$page && $page==''){
            $page=1;
        }
        $page=($page-1)*$limit;

        $getlog=Pay::where(['users_id'=>$userid,'trade_state'=>['<>','NOTPAY']])->order('datetime','desc')
            ->limit($limit,$page)->select();
        $data['list']=$getlog;
        $data['count']=Pay::where(['users_id'=>$userid])->count();
        if ($getlog){
//            $this->success(__($typetext[$type]).'记录',$data);
            $this->success('success',$data);
        }else{
            $this->error(__('no record'));
        }

    }

    /**
     * 用户资金明细
    * @param string $token 密钥
    * @param string $limit  数量（默认20）
    * @param string $page  页数（默认1）
    *
    */
    function money_s_log(){
        $userid=$this->token();//token验证
        $limit = $this->request->request('limit');
        if (!$limit && $limit==''){
            $limit=20;
        }
        $page = $this->request->request('page');
        if (!$page && $page==''){
            $page=1;
        }
        $page=($page-1)*$limit;
        $getlog=Moneylog::where(['users_id'=>$userid])->order('createtime','desc')
            ->limit($limit,$page)->select();
        foreach ($getlog as $k=>$v){
            $getlog[$k]['createtime']=date('Y-m-d H:i:s',$v['createtime']);
        }

        $data['list']=$getlog;
        $data['count']=Moneylog::where(['users_id'=>$userid])->count();
        if ($getlog){
            $this->success('success',$data);
        }else{
            $this->error(__('no record'));
        }

    }

    /**
     * 用户积分明细

     *
     * @param string $token 密钥
     * @param string $limit  数量（默认20）
     * @param string $page  页数（默认1）
     *
     */
    function score_s_log(){
        $userid=$this->token();//token验证
        $limit = $this->request->request('limit');
        if (!$limit && $limit==''){
            $limit=20;
        }
        $page = $this->request->request('page');
        if (!$page && $page==''){
            $page=1;
        }
        $page=($page-1)*$limit;
        $getlog=Scorelog::where(['users_id'=>$userid])->order('createtime','desc')
            ->limit($limit,$page)->select();
        if ($getlog){
            $this->success('success',$getlog);
        }else{
            $this->error(__('no record'));
        }

    }

    /**
     * 上分跳转页面
     * @param string $token 密钥
     */
    function paypal(){
        $userid=$this->token();//token验证
        $getlog['url']='https://www.paypal.com/paypalme/alt888?locale.x=en_GB';
        $this->success('success',$getlog);
    }

    /**
     * 客服链接
     * @param string $token 密钥
     */
    function kefu($token){
        $userid=$this->token();//token验证
        $user=\app\common\model\Users::get($userid);
        $adminid=$user->admin_id;
        if ($adminid==''||$adminid==0){
            $adminid=2;
        }
        $admin=Admin::get($adminid);
        $data=['kefu_url'=>$admin->kefu_url];
        $this->success('success',$data);
    }
    /**
     * app下载链接
     * @param string $token 密钥
     */
    function app_url($token){
        $userid=$this->token();//token验证
        $site = Config::get('site');
        $data=['app_url'=>$site['app_url']];
        $this->success('success',$data);
    }
}
